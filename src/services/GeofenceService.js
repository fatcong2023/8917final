const geofenceData = {
    "type": "Feature",
    "properties": {
      "center": [-75.74740191869692, 45.39574634172982],
      "radius_km": 100
    },
    "geometry": {
      "type": "Polygon",
      "coordinates": [
        [
          [-75.74740191869692, 46.29506794764855],
          [-75.973353416036, 46.28118488150255],
          [-76.19210845907628, 46.239978228873504],
          [-76.40236142939365, 46.17248073508901],
          [-76.60123552424278, 46.07826447738982],
          [-76.78638914165327, 45.958467814903504],
          [-76.95590414501717, 45.814812961744124],
          [-77.10838207463179, 45.649485813995616],
          [-77.24291969589087, 45.46413209366472],
          [-77.35812316667522, 45.26083957250522],
          [-77.45210061771923, 45.04214256193192],
          [-77.52344740763089, 44.81086882894432],
          [-77.57126660749289, 44.57015401411612],
          [-77.59413920885956, 44.32441236422549],
          [-77.5911132400621, 44.07730009144149],
          [-77.56278108082395, 43.83261310208863],
          [-77.5092849827887, 43.594169497316045],
          [-77.4313070849194, 43.365654681180244],
          [-77.32907429547444, 43.1506105514897],
          [-77.20332822981203, 42.952366472109556],
          [-77.0553227557531, 42.77493398427181],
          [-76.88682850824752, 42.62204290732608],
          [-76.69925887402867, 42.49713702502228],
          [-76.49474187300561, 42.40329482613969],
          [-76.27510641360532, 42.34229265529633],
          [-76.04383622683507, 42.31556506108669],
          [-75.80411813955022, 42.32331722817475],
          [-75.5598129669364, 42.36653015840907],
          [-75.31543642980016, 42.4459687197475],
          [-75.0751110992433, 42.56112228417113],
          [-74.8434852265403, 42.71022601509716],
          [-74.62461554044789, 42.89123902625544],
          [-74.42292565869145, 43.10085250120159],
          [-74.24223972610572, 43.33555864488242],
          [-74.08683677109405, 43.59170220191676],
          [-73.96034973536025, 43.864529351479494],
          [-73.86580948904147, 44.149410026143165],
          [-73.80565244561336, 44.441854119649765],
          [-73.7828190346873, 44.73766829070694],
          [-73.79974614889006, 45.03209191178883],
          [-73.85735805992268, 45.32081834521085],
          [-73.95506439718865, 45.59900149679264],
          [-74.09183666974935, 45.86229162894015],
          [-74.26534445614742, 46.10692013752501],
          [-74.4738929298868, 46.32976962594228],
          [-74.71538538115777, 46.52746789068503],
          [-74.9874048208822, 46.69641390890244],
          [-75.28718651201456, 46.83379705262442],
          [-75.61167815029775, 46.93772656146595],
          [-75.95861900350961, 47.00724843662956],
          [-76.32454931687793, 47.04134260870609],
          [-76.70598313807718, 47.03904684002698],
          [-77.10038619621153, 47.0003976724778],
          [-77.50418579136011, 46.926517316575216],
          [-77.91477658072214, 46.81853794306998],
          [-78.3295145669716, 46.677649684310845],
          [-78.74580768575503, 46.50506932031244],
          [-79.16008477305136, 46.30202346634331]
        ]
      ]
    }
  };
  
  // Check if a point is inside the geofence polygon
  function isPointInPolygon(point, polygon) {
    // Ray casting algorithm for point in polygon detection
    const x = point[0];
    const y = point[1];
    let inside = false;
    
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const xi = polygon[i][0];
      const yi = polygon[i][1];
      const xj = polygon[j][0];
      const yj = polygon[j][1];
      
      const intersect = ((yi > y) !== (yj > y)) &&
          (x < (xj - xi) * (y - yi) / (yj - yi) + xi);
      
      if (intersect) inside = !inside;
    }
    
    return inside;
  }
  
  // Check if coordinates are within the geofence
  function isWithinGeofence(longitude, latitude) {
    return isPointInPolygon(
      [longitude, latitude], 
      geofenceData.geometry.coordinates[0]
    );
  }
  
  // Get the center coordinates of the geofence
  function getGeofenceCenter() {
    return {
      longitude: geofenceData.properties.center[0],
      latitude: geofenceData.properties.center[1]
    };
  }
  
  // Get the geofence radius in kilometers
  function getGeofenceRadiusKm() {
    return geofenceData.properties.radius_km;
  }
  
  // Get the entire geofence data
  function getGeofenceData() {
    return geofenceData;
  }
  
  module.exports = {
    isWithinGeofence,
    getGeofenceCenter,
    getGeofenceRadiusKm,
    getGeofenceData
  };